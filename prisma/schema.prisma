// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id        String     @id @default(uuid())
  username  String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  routines  Routine[]
}

model Routine {
  id        String     @id @default(uuid())
  name      String
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  days      Day[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([name, userId])
}

model Day {
  id         String           @id @default(uuid())
  weekday    Weekday
  routineId  String
  routine    Routine          @relation(fields: [routineId], references: [id], onDelete: Cascade)
  exercises  DayExercise[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([weekday, routineId])
}

model Exercise {
  id         String           @id @default(uuid())
  name       String           @unique
  days       DayExercise[]
  weights    Weight[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model DayExercise {
  dayId       String
  exerciseId  String
  day         Day             @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exercise    Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@id([dayId, exerciseId])
}

model Weight {
  id          String    @id @default(uuid())
  amount      Float
  reps        Int?
  sets        Int?
  exerciseId  String
  exercise    Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
